"""Plant disease detection service using Hugging Face models."""

import streamlit as st
from transformers import pipeline
from PIL import Image
import torch
import numpy as np
import requests
import os

class DiseaseDetectionService:
    def __init__(self):
        self.model_name = "linkanjarad/mobilenet_v2_1.0_224-plant-disease-identification"
        self.classifier = None
        self.load_model()
    
    def load_model(self):
        """Load the plant disease detection model."""
        try:
            # Check if CUDA is available
            device = 0 if torch.cuda.is_available() else -1
            
            self.classifier = pipeline(
                "image-classification",
                model=self.model_name,
                device=device
            )
            st.success("Disease detection model loaded successfully!")
        except Exception as e:
            st.error(f"Error loading disease detection model: {e}")
            self.classifier = None
    
    def detect_disease(self, image):
        """Detect plant disease from image."""
        if not self.classifier:
            return None
        
        try:
            # Ensure image is in RGB format
            if image.mode != 'RGB':
                image = image.convert('RGB')
            
            # Get predictions
            predictions = self.classifier(image)
            
            # Return top 3 predictions
            return predictions[:3]
        except Exception as e:
            st.error(f"Error in disease detection: {e}")
            return None
    
    def get_disease_advice(self, disease_name, confidence, language='en'):
        """Get farming advice for detected disease."""
        # Disease advice database
        disease_advice = {
            'healthy': {
                'en': "Your plant looks healthy! Continue with regular care and monitoring.",
                'hi': "рдЖрдкрдХрд╛ рдкреМрдзрд╛ рд╕реНрд╡рд╕реНрде рджрд┐рдЦ рд░рд╣рд╛ рд╣реИ! рдирд┐рдпрдорд┐рдд рджреЗрдЦрднрд╛рд▓ рдФрд░ рдирд┐рдЧрд░рд╛рдиреА рдЬрд╛рд░реА рд░рдЦреЗрдВред",
                'ta': "роЙроЩрпНроХро│рпН роЪрпЖроЯро┐ роЖро░рпЛроХрпНроХро┐ропрооро╛роХ родрпЖро░ро┐роХро┐ро▒родрпБ! ро╡ро┤роХрпНроХрооро╛рой рокро░ро╛рооро░ро┐рокрпНрокрпБ рооро▒рпНро▒рпБроорпН роХрогрпНроХро╛рогро┐рокрпНрокрпИродрпН родрпКроЯро░ро╡рпБроорпНред",
                'te': "р░ор▒А р░ор▒Кр░Хр▒Нр░Х р░Жр░░р▒Лр░Чр▒Нр░пр░Вр░Чр░╛ р░Хр░ир░┐р░кр░┐р░╕р▒Нр░др▒Лр░Вр░жр░┐! р░╕р░╛р░зр░╛р░░р░г р░╕р░Вр░░р░Хр▒Нр░╖р░г р░ор░░р░┐р░пр▒Б р░кр░░р▒Нр░пр░╡р▒Зр░Хр▒Нр░╖р░гр░ир▒Б р░Хр▒Кр░ир░╕р░╛р░Чр░┐р░Вр░Ър░Вр░бр░┐ред"
            },
            'bacterial_blight': {
                'en': "Bacterial blight detected. Remove affected leaves, improve air circulation, and apply copper-based fungicide.",
                'hi': "рдмреИрдХреНрдЯреАрд░рд┐рдпрд▓ рдмреНрд▓рд╛рдЗрдЯ рдХрд╛ рдкрддрд╛ рдЪрд▓рд╛ред рдкреНрд░рднрд╛рд╡рд┐рдд рдкрддреНрддрд┐рдпреЛрдВ рдХреЛ рд╣рдЯрд╛рдПрдВ, рд╣рд╡рд╛ рдХрд╛ рд╕рдВрдЪрд╛рд░ рдмреЗрд╣рддрд░ рдмрдирд╛рдПрдВ, рдФрд░ рддрд╛рдВрдмрд╛ рдЖрдзрд╛рд░рд┐рдд рдХрд╡рдХрдирд╛рд╢реА рд▓рдЧрд╛рдПрдВред",
                'ta': "рокро╛роХрпНроЯрпАро░ро┐ропро▓рпН рокрпНро│рпИроЯрпН роХрогрпНроЯро▒ро┐ропрокрпНрокроЯрпНроЯродрпБ. рокро╛родро┐роХрпНроХрокрпНрокроЯрпНроЯ роЗро▓рпИроХро│рпИ роЕроХро▒рпНро▒ро┐, роХро╛ро▒рпНро▒рпБ роЪрпБро┤ро▒рпНроЪро┐ропрпИ роорпЗроорпНрокроЯрпБродрпНродро┐, роЪрпЖроорпНрокрпБ роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓ро╛рой рокрпВроЮрпНроЪрпИроХрпН роХрпКро▓рпНро▓ро┐ропрпИрокрпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпНред",
                'te': "р░мр▒Нр░пр░╛р░Хр▒Нр░Яр▒Ар░░р░┐р░пр░▓р▒Н р░мр▒Нр░▓р▒Ир░Яр▒Н р░Чр▒Бр░░р▒Нр░др░┐р░Вр░Ър░мр░бр░┐р░Вр░жр░┐. р░кр▒Нр░░р░нр░╛р░╡р░┐р░д р░Жр░Хр▒Бр░▓р░ир▒Б р░др▒Кр░▓р░Чр░┐р░Вр░Ър░┐, р░Чр░╛р░▓р░┐ р░кр▒Нр░░р░╕р░░р░гр░ир▒Б р░ор▒Жр░░р▒Бр░Чр▒Бр░кр░░р░Ър░┐, р░░р░╛р░Чр░┐ р░Жр░зр░╛р░░р░┐р░д р░╢р░┐р░▓р▒Ар░Вр░зр▒Нр░░р░ир░╛р░╢р░Хр░╛р░ир▒Нр░ир░┐ р░╡р░░р▒Нр░др░┐р░Вр░Ър░Вр░бр░┐ред"
            },
            'leaf_spot': {
                'en': "Leaf spot disease found. Remove infected leaves, avoid overhead watering, and apply appropriate fungicide.",
                'hi': "рдкрддреНрддреА рдзрдмреНрдмрд╛ рд░реЛрдЧ рдорд┐рд▓рд╛ред рд╕рдВрдХреНрд░рдорд┐рдд рдкрддреНрддрд┐рдпреЛрдВ рдХреЛ рд╣рдЯрд╛рдПрдВ, рдКрдкрд░ рд╕реЗ рдкрд╛рдиреА рджреЗрдиреЗ рд╕реЗ рдмрдЪреЗрдВ, рдФрд░ рдЙрдкрдпреБрдХреНрдд рдХрд╡рдХрдирд╛рд╢реА рд▓рдЧрд╛рдПрдВред",
                'ta': "роЗро▓рпИрокрпН рокрпБро│рпНро│ро┐ роирпЛропрпН роХрогрпНроЯро▒ро┐ропрокрпНрокроЯрпНроЯродрпБ. рокро╛родро┐роХрпНроХрокрпНрокроЯрпНроЯ роЗро▓рпИроХро│рпИ роЕроХро▒рпНро▒ро┐, роорпЗро▓рпН роирпАро░рпНрокрпНрокро╛роЪройродрпНродрпИродрпН родро╡ро┐ро░рпНродрпНродрпБ, рокрпКро░рпБродрпНродрооро╛рой рокрпВроЮрпНроЪрпИроХрпН роХрпКро▓рпНро▓ро┐ропрпИрокрпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпНред",
                'te': "р░Жр░Хр▒Б р░ор░Ър▒Нр░Ъ р░╡р▒Нр░пр░╛р░зр░┐ р░Хр░ир▒Бр░Чр▒Кр░ир░мр░бр░┐р░Вр░жр░┐. р░╕р▒Лр░Хр░┐р░и р░Жр░Хр▒Бр░▓р░ир▒Б р░др▒Кр░▓р░Чр░┐р░Вр░Ър░┐, р░кр▒Ир░ир▒Бр░Вр░бр░┐ р░ир▒Ар░░р▒Б р░кр▒Лр░пр░бр░В р░ор░╛р░ир▒Бр░Хр▒Бр░ир░┐, р░др░Чр░┐р░и р░╢р░┐р░▓р▒Ар░Вр░зр▒Нр░░р░ир░╛р░╢р░Хр░╛р░ир▒Нр░ир░┐ р░╡р░░р▒Нр░др░┐р░Вр░Ър░Вр░бр░┐ред"
            }
        }
        
        # Default advice if specific disease not found
        default_advice = {
            'en': f"Disease detected with {confidence:.1%} confidence. Consult with local agricultural extension officer for specific treatment.",
            'hi': f"{confidence:.1%} рд╡рд┐рд╢реНрд╡рд╕рдиреАрдпрддрд╛ рдХреЗ рд╕рд╛рде рд░реЛрдЧ рдХрд╛ рдкрддрд╛ рдЪрд▓рд╛ред рд╡рд┐рд╢рд┐рд╖реНрдЯ рдЙрдкрдЪрд╛рд░ рдХреЗ рд▓рд┐рдП рд╕реНрдерд╛рдиреАрдп рдХреГрд╖рд┐ рд╡рд┐рд╕реНрддрд╛рд░ рдЕрдзрд┐рдХрд╛рд░реА рд╕реЗ рд╕рд▓рд╛рд╣ рд▓реЗрдВред",
            'ta': f"{confidence:.1%} роироорпНрокроХродрпНродройрпНроорпИропрпБроЯройрпН роирпЛропрпН роХрогрпНроЯро▒ро┐ропрокрпНрокроЯрпНроЯродрпБ. роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯ роЪро┐роХро┐роЪрпНроЪрпИроХрпНроХро╛роХ роЙро│рпНро│рпВро░рпН ро╡ро┐ро╡роЪро╛роп ро╡ро┐ро░ро┐ро╡ро╛роХрпНроХ роЕродро┐роХро╛ро░ро┐ропрпБроЯройрпН роЖро▓рпЛроЪро┐роХрпНроХро╡рпБроорпН.",
            'te': f"{confidence:.1%} р░╡р░┐р░╢р▒Нр░╡р░╕р░ир▒Ар░пр░др░др▒Л р░╡р▒Нр░пр░╛р░зр░┐ р░Чр▒Бр░░р▒Нр░др░┐р░Вр░Ър░мр░бр░┐р░Вр░жр░┐. р░ир░┐р░░р▒Нр░жр░┐р░╖р▒Нр░Я р░Ър░┐р░Хр░┐р░др▒Нр░╕ р░Хр▒Лр░╕р░В р░╕р▒Нр░ер░╛р░ир░┐р░Х р░╡р▒Нр░пр░╡р░╕р░╛р░п р░╡р░┐р░╕р▒Нр░др░░р░г р░Ер░зр░┐р░Хр░╛р░░р░┐р░др▒Л р░╕р░Вр░кр▒Нр░░р░жр░┐р░Вр░Ър░Вр░бр░┐ред"
        }
        
        # Clean disease name for lookup
        clean_disease = disease_name.lower().replace(' ', '_').replace('-', '_')
        
        # Find matching advice
        for key, advice in disease_advice.items():
            if key in clean_disease or clean_disease in key:
                return advice.get(language, advice['en'])
        
        return default_advice.get(language, default_advice['en'])
    
    def format_detection_results(self, predictions, language='en'):
        """Format disease detection results for display."""
        if not predictions:
            return "No predictions available."
        
        result = f"ЁЯФН Disease Detection Results:\n\n"
        
        for i, pred in enumerate(predictions, 1):
            confidence = pred['score']
            disease = pred['label']
            
            result += f"{i}. {disease.title()}\n"
            result += f"   Confidence: {confidence:.1%}\n"
            
            if i == 1:  # Most likely prediction
                advice = self.get_disease_advice(disease, confidence, language)
                result += f"\nЁЯзСтАНЁЯМ╛ Recommended Action:\n{advice}\n"
            
            result += "\n"
        
        return result

# Global disease detection service instance
disease_detection_service = DiseaseDetectionService()